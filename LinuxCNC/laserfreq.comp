component laserfreq "Pulse driver for CO2 Laser";
author "Ben Jackson <ben@ben.com>";
pin in bit enable "Enable pulse generation";
pin in float velocity "Velocity of the laser head (e.g. motion.current-vel)";
pin in float pulse-per-unit "How many pulses per unit distance";
pin out bit pulse "Output firing pulse";
pin out bit continuous "True if current inputs are causing continuous (not pulsed) output";
param rw float duration "Duration of each pulse in seconds";
param rw float min-off-duration "If nonzero force continuous pulsing with at least this much off-time in seconds";
function make_pulses fp "Add to fast thread to make laser pulses";
function update fp "Add to update thread to compute pulse parameters";
variable int updated;
variable float interval;
variable float accum;
variable float pulse_remain;
license "GPL";
;;
FUNCTION(update) {
    if (velocity == 0.0 || pulse_per_unit == 0) {
	updated = 0;
    } else {
	// velocity * pulse-per-unit gives pulses per second
	// pulse interval is then 1/pps 
	interval = 1.0 / (velocity * pulse_per_unit);
	if (min_off_duration > 0 && interval < min_off_duration + duration)
	    interval = min_off_duration + duration;

	updated = 1;
    }
}

FUNCTION(make_pulses) {
    if (!enable || !updated) {
	accum = 0;
	pulse_remain = 0;
	pulse = 0;
	continuous = 0;
	return;
    }

    accum += fperiod;
    if (accum > interval) {
	accum -= interval;
	if (accum > interval)
	    accum = 0.0;
	continuous = (pulse_remain > 0);
	pulse_remain = duration;
    }

    if (pulse_remain > 0) {
	pulse = 1;
	pulse_remain -= fperiod;
    } else {
	pulse = 0;
    }
}
